package p;

import java.util.*;

public class Plate6 {

    static class Edge {
        int src, dest;

        Edge(int src, int dest) {
            this.src = src;
            this.dest = dest;
        }
    }


    static class Graph {
        int vertices;
        List<List<Integer>> adjList;

        Graph(int vertices) {
            this.vertices = vertices;
            adjList = new ArrayList<>();
            for (int i = 0; i < vertices; i++) {
                adjList.add(new ArrayList<>());
            }
        }

        void addEdge(int src, int dest) {
            adjList.get(src).add(dest);
            adjList.get(dest).add(src);
        }

        boolean isConnected() {
            boolean[] visited = new boolean[vertices];
            DFS(0, visited);
            for (boolean v : visited) {
                if (!v) return false;
            }
            return true;
        }

        void DFS(int vertex, boolean[] visited) {
            visited[vertex] = true;
            for (int neighbor : adjList.get(vertex)) {
                if (!visited[neighbor]) {
                    DFS(neighbor, visited);
                }
            }
        }

        int connectedComponents() {
            boolean[] visited = new boolean[vertices];
            int count = 0;
            for (int i = 0; i < vertices; i++) {
                if (!visited[i]) {
                    DFS(i, visited);
                    count++;
                }
            }
            return count;
        }

        boolean hasCycle() {
            boolean[] visited = new boolean[vertices];
            for (int i = 0; i < vertices; i++) {
                if (!visited[i] && DFSForCycle(i, visited, -1)) {
                    return true;
                }
            }
            return false;
        }

        boolean DFSForCycle(int vertex, boolean[] visited, int parent) {
            visited[vertex] = true;
            for (int neighbor : adjList.get(vertex)) {
                if (!visited[neighbor]) {
                    if (DFSForCycle(neighbor, visited, vertex)) {
                        return true;
                    }
                } else if (neighbor != parent) {
                    return true;
                }
            }
            return false;
        }

        boolean isBipartite() {
            int[] color = new int[vertices];
            Arrays.fill(color, -1);
            for (int i = 0; i < vertices; i++) {
                if (color[i] == -1) {
                    if (!BFSForBipartite(i, color)) {
                        return false;
                    }
                }
            }
            return true;
        }

        boolean BFSForBipartite(int src, int[] color) {
            Queue<Integer> queue = new LinkedList<>();
            queue.add(src);
            color[src] = 1;
            while (!queue.isEmpty()) {
                int u = queue.poll();
                for (int v : adjList.get(u)) {
                    if (color[v] == -1) {
                        color[v] = 1 - color[u];
                        queue.add(v);
                    } else if (color[v] == color[u]) {
                        return false;
                    }
                }
            }
            return true;
        }

        int[] degrees() {
            int[] degrees = new int[vertices];
            for (int i = 0; i < vertices; i++) {
                degrees[i] = adjList.get(i).size();
            }
            return degrees;
        }

        int[][] toAdjacencyMatrix() {
            int[][] matrix = new int[vertices][vertices];
            for (int i = 0; i < vertices; i++) {
                for (int j : adjList.get(i)) {
                    matrix[i][j]++;
                }
            }
            return matrix;
        }

        int[][] toIncidenceMatrix(List<Edge> edges) {
            int[][] matrix = new int[vertices][edges.size()];
            for (int i = 0; i < edges.size(); i++) {
                Edge edge = edges.get(i);
                matrix[edge.src][i] = 1;
                matrix[edge.dest][i] = 1;
            }
            return matrix;
        }
        
        void displayVertices() {
            System.out.println("Vertices of the graph:");
            for (int i = 0; i < vertices; i++) {
                System.out.println("Vertex " + i);
            }
        }

        void displayEdges() {
            System.out.println("Edges of the graph:");
            for (int i = 0; i < vertices; i++) {
                for (int neighbor : adjList.get(i)) {
                    System.out.println(i + " - " + neighbor);
                }
            }
        }
    }

    // Main method to test the functionalities
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.println("Enter the number of vertices:");
        int vertices = scanner.nextInt();
        Graph graph = new Graph(vertices);

        System.out.println("Enter the number of edges:");
        int edgesCount = scanner.nextInt();
        List<Edge> edges = new ArrayList<>();
        
        System.out.println("Enter the edges (source and destination pairs):");
        for (int i = 0; i < edgesCount; i++) {
            int src = scanner.nextInt();
            int dest = scanner.nextInt();
            graph.addEdge(src, dest);
            edges.add(new Edge(src, dest));
        }

        boolean exit = false;
        while (!exit) {
            System.out.println("\nChoose an operation:");
            System.out.println("1. Check if the graph is connected");
            System.out.println("2. Find the number of connected components");
            System.out.println("3. Check if the graph has a cycle");
            System.out.println("4. Check if the graph is bipartite");
            System.out.println("5. Display degrees of vertices");
            System.out.println("6. Display adjacency matrix");
            System.out.println("7. Display incidence matrix");
            System.out.println("8. Display vertices");
            System.out.println("9. Display edges");
            System.out.println("0. Exit");
            
            int choice = scanner.nextInt();
            switch (choice) {
                case 1:
                    System.out.println("Is the graph connected? " + graph.isConnected());
                    break;
                case 2:
                    if (graph.isConnected()) {
                        System.out.println("The graph is connected.");
                    } else {
                        System.out.println("Number of connected components: " + graph.connectedComponents());
                    }
                    break;
                case 3:
                    System.out.println("Does the graph have a cycle? " + graph.hasCycle());
                    break;
                case 4:
                    System.out.println("Is the graph bipartite? " + graph.isBipartite());
                    break;
                case 5:
                    int[] degrees = graph.degrees();
                    System.out.println("Degrees of vertices:");
                    for (int i = 0; i < degrees.length; i++) {
                        System.out.println("Vertex " + i + ": " + degrees[i]);
                    }
                    break;
                case 6:
                    int[][] adjMatrix = graph.toAdjacencyMatrix();
                    System.out.println("Adjacency Matrix:");
                    for (int[] row : adjMatrix) {
                        System.out.println(Arrays.toString(row));
                    }
                    break;
                case 7:
                    int[][] incidenceMatrix = graph.toIncidenceMatrix(edges);
                    System.out.println("Incidence Matrix:");
                    for (int[] row : incidenceMatrix) {
                        System.out.println(Arrays.toString(row));
                    }
                    break;
                case 8:
                    graph.displayVertices();
                    break;
                case 9:
                    graph.displayEdges();
                    break;
                case 0:
                    exit = true;
                    break;
                default:
                    System.out.println("Invalid choice. Please try again.");
            }
        }
        
        scanner.close();
    }
}
